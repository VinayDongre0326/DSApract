//Stud_Database_Insertion
#include <iostream>
#include <string>
using namespace std;

struct Student {
    int rollNo;
    string name;
    float sgpa;
};

void insertionSort(Student students[], int n);
int linearSearchBySGPA(Student students[], int n, float sgpa);
int binarySearchByName(Student students[], int low, int high, string name);
void displayStudents(Student students[], int n);

int main() {
    int n;

    cout << "Enter the number of students: ";
    cin >> n;

    Student students[n];
    for (int i = 0; i < n; i++) {
        cout << "\nEnter details for student " << i + 1 << ":" << endl;
        cout << "Roll Number: ";
        cin >> students[i].rollNo;
        cin.ignore(); // To ignore newline character
        cout << "Name: ";
        getline(cin, students[i].name);
        cout << "SGPA: ";
        cin >> students[i].sgpa;
    }

    int choice;
    do {
        cout << "\n\nMenu:" << endl;
        cout << "1. Display roll call list (sorted by Roll Number)" << endl;
        cout << "2. Search students by SGPA" << endl;
        cout << "3. Search student by Name" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            insertionSort(students, n);
            cout << "\nRoll Call List (sorted by Roll Number):" << endl;
            displayStudents(students, n);
            break;

        case 2: {
            float searchSGPA;
            cout << "\nEnter SGPA to search: ";
            cin >> searchSGPA;
            int index = linearSearchBySGPA(students, n, searchSGPA);
            if (index != -1) {
                cout << "\nStudent found:" << endl;
                cout << "Roll Number: " << students[index].rollNo << endl;
                cout << "Name: " << students[index].name << endl;
                cout << "SGPA: " << students[index].sgpa << endl;
            } else {
                cout << "\nNo student found with SGPA " << searchSGPA << endl;
            }
            break;
        }

        case 3: {
            string searchName;
            cin.ignore();
            cout << "\nEnter Name to search: ";
            getline(cin, searchName);

            insertionSort(students, n);
            int index = binarySearchByName(students, 0, n - 1, searchName);
            if (index != -1) {
                cout << "\nStudent found:" << endl;
                cout << "Roll Number: " << students[index].rollNo << endl;
                cout << "Name: " << students[index].name << endl;
                cout << "SGPA: " << students[index].sgpa << endl;
            } else {
                cout << "\nNo student found with Name " << searchName << endl;
            }
            break;
        }

        case 4:
            cout << "\nExiting program." << endl;
            break;

        default:
            cout << "\nInvalid choice. Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}

void insertionSort(Student students[], int n) {
    for (int i = 1; i < n; i++) {
        Student key = students[i];
        int j = i - 1;

        while (j >= 0 && students[j].rollNo > key.rollNo) {
            students[j + 1] = students[j];
            j--;
        }
        students[j + 1] = key;
    }
}

int linearSearchBySGPA(Student students[], int n, float sgpa) {
    for (int i = 0; i < n; i++) {
        if (students[i].sgpa == sgpa) {
            return i;
        }
    }
    return -1;
}

int binarySearchByName(Student students[], int low, int high, string name) {
    if (low <= high) {
        int mid = (low + high) / 2;

        if (students[mid].name == name) {
            return mid;
        } else if (students[mid].name < name) {
            return binarySearchByName(students, mid + 1, high, name);
        } else {
            return binarySearchByName(students, low, mid - 1, name);
        }
    }
    return -1;
}

void displayStudents(Student students[], int n) {
    cout << "\nRoll Number\tName\t\tSGPA" << endl;
    for (int i = 0; i < n; i++) {
        cout << students[i].rollNo << "\t\t" << students[i].name << "\t\t" << students[i].sgpa << endl;
    }
}
